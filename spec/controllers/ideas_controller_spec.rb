# encoding: utf-8
require 'spec_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

describe IdeasController do
  render_views
  # DO NOT test access deny since user can not call all controller before login.

  # This should return the minimal set of attributes required to create a valid
  # Idea. As you add validations to Idea, be sure to
  # update the return value of this method accordingly.
  before(:each) do 
    @user = Factory(:user)
    sign_in @user
  end
  
  def valid_attributes
    { :title => "aaa",
      :content => "123456"
    }
  end

  describe "GET" do
    before(:each) do 
      @idea1 = Factory(:idea, :user => @user)
      @idea2 = Factory(:idea, :user => @user,
                       :title => Factory.next(:title))
      @another_user = Factory(:user, :email => Factory.next(:email))
      @another_ideas = Array.new
      0.upto(3).each do 
        @another_ideas << Factory(:idea, :user => @another_user,
                                  :title => Factory.next(:title))
      end
      @user.like!(@another_ideas[2].id, 1)
      @user.like!(@another_ideas[3].id, 1)
    end

    describe "index" do
      it "assigns a new idea as @idea" do
        get :index
        response.should redirect_to(others_ideas_path)
      end

    end

    describe "own" do
      before(:each) do 
        get :own
      end
      
      it "should only show my ideas" do
        assigns(:ideas).should eq([@idea2, @idea1])
      end
      
      it "should provide liked_ideas" do 
        assigns(:idea).should be_a(Idea)
      end
    end

    describe "others" do
      before(:each) do 
        get :others
      end
      
      it "should show unliked ideas" do
        assigns(:ideas).should eq(@another_ideas[0..1])
      end
      
      it "should show liked ideas" do
        assigns(:liked_ideas).should eq([@another_ideas[3], @another_ideas[2]])
      end
      
      it "should show message when no idea" do 
        @another_ideas.each { |it| it.destroy }
        get :others
        response.should have_selector("div", :content => '没有新鲜点子啦。')
      end
    end

    describe "upload" do
      before(:each) do 
        get :upload
      end
      
      it "should have empty arrays" do
        assigns(:plans).should eq([])
        assigns(:plan).should be_a(Plan)
      end
    end

    describe "rule" do
      before(:each) do 
        get :rules
      end
      
      it "should only show my ideas" do
        response.should have_selector("h2", :content => '欢迎')
      end
    end
  end

  describe "POST create" do
    describe "with valid params" do
      it "creates a new Idea" do
        expect {
          xhr :post, :create, :idea => valid_attributes
        }.to change(Idea, :count).by(1)
      end

      it "assigns a newly created idea as @idea" do
        xhr :post, :create, :idea => valid_attributes
        assigns(:idea).should be_a(Idea)
        assigns(:idea).should be_persisted
      end
    end

    describe "with invalid params" do
      it "assigns a newly created but unsaved idea as @idea" do
        # Trigger the behavior that occurs when invalid params are submitted
        Idea.any_instance.stub(:save).and_return(false)
        xhr :post, :create, :idea => {}
        assigns(:idea).should be_a_new(Idea)
      end
    end
  end

  describe "DELETE destroy" do
    it "destroys the requested idea" do
      idea = Factory(:idea, :user => @user)
      expect {
        xhr :delete, :destroy, :id => idea.id
      }.to change(Idea, :count).by(-1)
    end
  end

  describe "DELETE be another user" do
    before(:each) do
      wrong_user = Factory(:user, :email => Factory.next(:email))
      sign_out(wrong_user)
      sign_in(wrong_user)
      @idea1 = Factory(:idea, :user => @user)
    end

    it "should deny access" do
      xhr :delete, :destroy, :id => @idea1
      response.should redirect_to(root_url)
    end
  end
end
